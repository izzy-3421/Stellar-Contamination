import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter

# Constants for Planck's Law
h = 6.626e-34  # Planck's constant (JÂ·s)
c = 3.0e8      # Speed of light (m/s)
k_B = 1.381e-23  # Boltzmann constant (J/K)
wavelength = 1080e-9  # Wavelength of helium line (1080 nm = 1.08e-6 m)

# Function to compute spectral radiance using Planck's Law assuming LTE
def planck_law(T, wavelength):
    return (2 * h * c**2) / (wavelength**5) * (1 / (np.exp(h * c / (wavelength * k_B * T)) - 1))

# Set random seed for reproducibility
np.random.seed(42)

# Define simulation parameters
grid_size = 768  # Increased resolution for better detail
num_spots = 15    # Number of sunspots
num_faculae = 20  # Number of faculae regions

# Generate granulation pattern using random noise
temperature = np.random.rand(grid_size, grid_size) * 5778  # Sun-like temperature in Kelvin

# Smooth the background to create granulation effect
granulation = gaussian_filter(temperature, sigma=1.8)
density = np.random.rand(grid_size, grid_size) * 1e17  # Approximate photospheric density
magnetic_field_strength = np.random.rand(grid_size, grid_size) * 0.05  # Magnetic field in Tesla

## Function to generate granular structure for sunspots and faculae
def generate_granular_structure(radius, temperature_base, variation, reduction_factor):
    size = radius * 2
    temp_granules = temperature_base + (np.random.rand(size, size) - 0.5) * variation
    temp_granules = gaussian_filter(temp_granules, sigma=6)
    temp_granules = temp_granules * reduction_factor  # Apply temperature reduction or increase
    return temp_granules
# Create a copy of the temperature map to add sunspots and faculae
temperature_map = granulation.copy()

# Function to generate irregular shapes using random noise and Gaussian smoothing, with a radial mask to avoid edges
def generate_irregular_shape(radius):
    shape = np.random.rand(2 * radius, 2 * radius)
    shape = gaussian_filter(shape, sigma=5)
    mask = shape > 0.505  # Threshold to create irregular shapes

    # Create a circular mask to blend the edges
    y, x = np.ogrid[-radius:radius, -radius:radius]
    irregular_mask = x**2 + y**2 <= radius**2
    irregular_shape = mask & irregular_mask

    return irregular_shape

# Function to add sunspots with irregular shapes, including penumbra and umbra
def add_sunspots(temperature_map, magnetic_field, num_spots):
    for _ in range(num_spots):
        x_center, y_center = np.random.randint(0, grid_size, 2)
        spot_radius = np.random.randint(20, 50)  # Random radius between 20 and 50 pixels

        # Generate an irregular sunspot shape
        spot_shape = generate_irregular_shape(spot_radius)
        shape_size = spot_shape.shape[0]

        # Define the umbra and penumbra radii
        penumbra_radius = spot_radius
        umbra_radius = int(0.4 * spot_radius)  # Umbra is about 20% of the area, radius is about 40% of penumbra

        # Generate umbra and penumbra shapes
        for i in range(shape_size):
            for j in range(shape_size):
                if spot_shape[i, j]:
                    x = x_center + i - shape_size // 2
                    y = y_center + j - shape_size // 2
                    if 0 <= x < grid_size and 0 <= y < grid_size:
                        # Calculate distance from the center
                        distance = np.sqrt((i - shape_size // 2)**2 + (j - shape_size // 2)**2)
                        if distance < umbra_radius:
                            # Apply umbra temperature reduction (darker core)
                            temperature_map[x, y] *= 0.4  # Reduce temperature more for umbra
                            magnetic_field[x, y] += 0.2  # Increase magnetic field strength
                        elif distance < penumbra_radius:
                            # Apply penumbra temperature reduction (slightly darker outer part)
                            temperature_map[x, y] *= 0.7  # Reduce temperature for penumbra
                            magnetic_field[x, y] += 0.1  # Increase magnetic field strength
    return temperature_map, magnetic_field

# Function to add faculae with irregular shapes
def add_faculae(temperature_map, magnetic_field, num_faculae):
    for _ in range(num_faculae):
        x_center, y_center = np.random.randint(0, grid_size, 2)
        faculae_radius = np.random.randint(15, 60)

        # Generate an irregular faculae shape
        faculae_shape = generate_irregular_shape(faculae_radius)
        shape_size = faculae_shape.shape[0]

        for i in range(shape_size):
            for j in range(shape_size):
                if faculae_shape[i, j]:
                    x = x_center + i - shape_size // 2
                    y = y_center + j - shape_size // 2
                    if 0 <= x < grid_size and 0 <= y < grid_size:
                        temperature_map[x, y] *= 1.3  # Brighten faculae
                        magnetic_field[x, y] += 0.05
    return temperature_map, magnetic_field

# Add sunspots and faculae to the temperature map
temperature_map, magnetic_field_smoothed = add_sunspots(temperature_map, magnetic_field_strength, num_spots)
temperature_map, magnetic_field_smoothed = add_faculae(temperature_map, magnetic_field_smoothed, num_faculae)

# Apply Planck's Law to compute the radiance at 1080 nm
radiance_map = planck_law(temperature_map, wavelength)

# Normalize the temperature map for visualization
temperature_map_normalized = (temperature_map - temperature_map.min()) / (temperature_map.max() - temperature_map.min())

# Plot the temperature map with sunspots and faculae
plt.figure(figsize=(10, 10))
plt.imshow(temperature_map, cmap="hot", origin="lower")
plt.colorbar(label="Temperature (K)")
plt.title("Simulated Solar Surface with Irregular Sunspots and Faculae (Temperature Map)")
plt.xlabel("X")
plt.ylabel("Y")
plt.axis("off")
plt.show()

# Plot the magnetic field strength
plt.figure(figsize=(10, 10))
plt.imshow(magnetic_field_smoothed, cmap="inferno", origin="lower")
plt.colorbar(label="Magnetic Field Strength (Tesla)")
plt.title("Simulated Magnetic Field on Solar Surface")
plt.xlabel("X")
plt.ylabel("Y")
plt.axis("off")
# plt.show()





